// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?
  location      String?
  availability  String?
  isPublic      Boolean   @default(true)
  rating        Float     @default(0)
  completedSwaps Int      @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  skillsOffered Skill[]   @relation("UserSkillsOffered")
  skillsWanted  Skill[]   @relation("UserSkillsWanted")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  sentRequests     SwapRequest[] @relation("SentRequests")
  receivedRequests SwapRequest[] @relation("ReceivedRequests")
  reviews          Review[] @relation("UserReviews")
  receivedReviews  Review[] @relation("ReceivedReviews")
  notifications    Notification[]
  successStories1   SuccessStory[] @relation("User1Stories")
  successStories2   SuccessStory[] @relation("User2Stories")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Skill {
  id          String   @id @default(cuid())
  name        String
  category    String
  description String?
  level       String   @default("beginner") // beginner, intermediate, advanced
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  usersOffering User[] @relation("UserSkillsOffered")
  usersWanting  User[] @relation("UserSkillsWanted")
  swapRequestsOffered SwapRequest[] @relation("SkillOffered")
  swapRequestsWanted  SwapRequest[] @relation("SkillWanted")
}

model SwapRequest {
  id          String   @id @default(cuid())
  fromUserId  String
  toUserId    String
  skillOfferedId String
  skillWantedId  String
  status      String   @default("pending") // pending, accepted, rejected, completed
  message     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  fromUser    User     @relation("SentRequests", fields: [fromUserId], references: [id])
  toUser      User     @relation("ReceivedRequests", fields: [toUserId], references: [id])
  skillOffered Skill   @relation("SkillOffered", fields: [skillOfferedId], references: [id])
  skillWanted  Skill   @relation("SkillWanted", fields: [skillWantedId], references: [id])
  messages    Message[]
  reviews     Review[]
}

model Message {
  id            String   @id @default(cuid())
  swapRequestId String
  fromUserId    String
  toUserId      String
  content       String
  isRead        Boolean  @default(false)
  createdAt     DateTime @default(now())

  swapRequest   SwapRequest @relation(fields: [swapRequestId], references: [id])
  fromUser      User        @relation("SentMessages", fields: [fromUserId], references: [id])
  toUser        User        @relation("ReceivedMessages", fields: [toUserId], references: [id])
}

model Review {
  id            String   @id @default(cuid())
  swapRequestId String
  reviewerId    String
  reviewedId    String
  rating        Int
  comment       String?
  createdAt     DateTime @default(now())

  swapRequest   SwapRequest @relation(fields: [swapRequestId], references: [id])
  reviewer      User        @relation("UserReviews", fields: [reviewerId], references: [id])
  reviewed      User        @relation("ReceivedReviews", fields: [reviewedId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // swap_request, message, review, etc.
  title     String
  message   String
  isRead    Boolean  @default(false)
  data      String?  // JSON string for additional data
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model SuccessStory {
  id          String   @id @default(cuid())
  title       String
  description String
  user1Id     String
  user2Id     String
  skill1      String
  skill2      String
  duration    String
  rating      Int
  testimonial String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user1       User     @relation("User1Stories", fields: [user1Id], references: [id])
  user2       User     @relation("User2Stories", fields: [user2Id], references: [id])
} 